from PyQt5.QtWidgets import QApplication, QGraphicsView, QStyleFactory
from PyQt5.QtCore import Qt 

import argparse
import sys
import os
import a_YAML_2_Graph
import a_Methods as m

if sys.platform == 'win32':
    # Windows-specific adjustments
    from ctypes import windll
    windll.shcore.SetProcessDpiAwareness(1)  # Для правильного масштабирования

# Autogenerated with DRAKON Editor 1.31

def a_Main():
    #item 169
    m.log_2_CSV("Liana: Start")
    #item 207
    m.file_CSV_Crop("log.csv",10)
    #item 170
    m.log_2_CSV("Liana: Command line arguments")
    #item 135
    s_Error,  \
    s_File_Name, \
    s_Diagram_Code = diagram_Code_From_Command_Line()
    #item 144
    if s_Error:
        #item 146
        m.warning_Show(s_Error)
        #item 171
        m.log_2_CSV("Liana: primitive")
        #item 147
        s_File_Name = m.file_Name_Temp()
        #item 208
        if s_File_Name:
            #item 139
            s_Diagram_Code = m.primitive_Code()
            #item 172
            m.log_2_CSV("Liana: Diagram show")
            #item 143
            state = m.diagram_Show( \
            		s_Diagram_Code)
            #item 163
            if state:
                #item 173
                m.log_2_CSV("Liana: Users actions")
                #item 148
                state = user_Actions( \
                		s_File_Name)
                #item 228
                if state:
                    #item 231
                    m.warning_Show(state)
                else:
                    pass
            else:
                #item 166
                state = \
                "Ошибка рисования диаграммы"
                m.warning_Show(state)
        else:
            #item 211
            state = "НЕ создался временный файл"
            m.log_2_CSV(state, "Error")
            m.warning_Show(state)
    else:
        #item 168
        if s_Diagram_Code:
            #item 172
            m.log_2_CSV("Liana: Diagram show")
            #item 143
            state = m.diagram_Show( \
            		s_Diagram_Code)
            #item 163
            if state:
                #item 173
                m.log_2_CSV("Liana: Users actions")
                #item 148
                state = user_Actions( \
                		s_File_Name)
                #item 228
                if state:
                    #item 231
                    m.warning_Show(state)
                else:
                    pass
            else:
                #item 166
                state = \
                "Ошибка рисования диаграммы"
                m.warning_Show(state)
        else:
            #item 171
            m.log_2_CSV("Liana: primitive")
            #item 147
            s_File_Name = m.file_Name_Temp()
            #item 208
            if s_File_Name:
                #item 139
                s_Diagram_Code = m.primitive_Code()
                #item 172
                m.log_2_CSV("Liana: Diagram show")
                #item 143
                state = m.diagram_Show( \
                		s_Diagram_Code)
                #item 163
                if state:
                    #item 173
                    m.log_2_CSV("Liana: Users actions")
                    #item 148
                    state = user_Actions( \
                    		s_File_Name)
                    #item 228
                    if state:
                        #item 231
                        m.warning_Show(state)
                    else:
                        pass
                else:
                    #item 166
                    state = \
                    "Ошибка рисования диаграммы"
                    m.warning_Show(state)
            else:
                #item 211
                state = "НЕ создался временный файл"
                m.log_2_CSV(state, "Error")
                m.warning_Show(state)


def diagram_Code_From_Command_Line():
    #item 187
    m.log_2_CSV("Liana: Start")
    #item 191
    s_Error = ""
    s_File_Name = ""
    s_Diagram_Code = ""
    #item 174
    parser = argparse.ArgumentParser(
        description="Утилита для работы с файлами")
    parser.add_argument('--file_create', type=str, help='Файл создать')
    parser.add_argument('--file_open', type=str, help='Файл открыть')
    
    args = parser.parse_args()
    #item 175
    if args.file_create:
        #item 192
        s_File_Name = args.file_create
        #item 189
        m.log_2_CSV("Liana: File create")
        #item 194
        b = m.file_Create(s_File_Name)
        #item 195
        if b:
            #item 204
            s_Diagram_Code = m.primitive_Code()
        else:
            #item 198
            s_Error = \
            "Ошибка создания файла {s_File_Name}"
    else:
        #item 184
        if args.file_open:
            #item 193
            s_File_Name = args.file_open
            #item 190
            m.log_2_CSV("Liana: File open")
            #item 199
            b = file_open(s_File_Name)
            #item 200
            if b:
                #item 205
                s_Diagram_Code = \
                file_2_Variable(s_File_Name)
            else:
                #item 203
                s_Error = \
                "Ошибка открытия файла {s_File_Name}"
        else:
            #item 188
            m.log_2_CSV("Liana: Arguments not found")
    #item 206
    return \
    	s_Error,  \
    	s_File_Name, \
    	s_Diagram_Code


def user_Actions(s_File_Name):
    while True:
        #item 238
        m.log_2_CSV("Liana: Start")
        #item 227
        a1_Keys = ["f", "q"]
        
        key = m.wait_for_keypress(a1_Keys)
        #item 232
        if key == "f":
            #item 239
            m.log_2_CSV("Liana: Elements hints")
            break
        else:
            pass
        #item 235
        if key == "q":
            break
        else:
            pass
        #item 241
        time.sleep(0.5)
    #item 240
    m.log_2_CSV("Liana: Exit")

if __name__ == "__main__":
    a_Main()
